"""Concatenate M3GNet results from multiple data files generated by slurm job array
into single file.
"""


# %%
from __future__ import annotations

import os
import warnings
from glob import glob

import pandas as pd
from megnet.utils.models import load_model
from pymatgen.core import Structure
from pymatgen.entries.compatibility import MaterialsProject2020Compatibility
from pymatgen.entries.computed_entries import ComputedStructureEntry
from pymatviz import density_scatter
from tqdm import tqdm

from matbench_discovery import today
from matbench_discovery.data import DATA_FILES, as_dict_handler
from matbench_discovery.energy import get_e_form_per_atom

__author__ = "Janosh Riebesell"
__date__ = "2022-08-16"

warnings.filterwarnings(action="ignore", category=UserWarning, module="pymatgen")


# %%
module_dir = os.path.dirname(__file__)
task_type = "IS2RE"
date = "2022-10-31"
glob_pattern = f"{date}-m3gnet-wbm-{task_type}/*.json.gz"
file_paths = sorted(glob(f"{module_dir}/{glob_pattern}"))
struct_col = "m3gnet_structure"
print(f"Found {len(file_paths):,} files for {glob_pattern = }")

dfs: dict[str, pd.DataFrame] = {}


# %%
for file_path in tqdm(file_paths):
    if file_path in dfs:
        continue
    df = pd.read_json(file_path).set_index("material_id")
    df[f"m3gnet_energy_{task_type}"] = [
        x["energies"][-1][0] for x in df.m3gnet_trajectory
    ]
    # drop trajectory to save memory
    dfs[file_path] = df.drop(columns="m3gnet_trajectory")


# %%
df_m3gnet = pd.concat(dfs.values()).round(4)


# %%
df_cse = pd.read_json(DATA_FILES.wbm_computed_structure_entries).set_index(
    "material_id"
)

df_cse["cse"] = [
    ComputedStructureEntry.from_dict(x) for x in tqdm(df_cse.computed_structure_entry)
]


# %% transfer M3GNet energies and relaxed structures WBM CSEs
cse: ComputedStructureEntry
for row in tqdm(df_m3gnet.itertuples(), total=len(df_m3gnet)):
    mat_id, struct_dict, m3gnet_energy, *_ = row
    m3gnet_struct = Structure.from_dict(struct_dict)
    df_m3gnet.loc[mat_id, struct_col] = m3gnet_struct
    cse = df_cse.loc[mat_id, "cse"]
    cse._energy = m3gnet_energy  # cse._energy is the uncorrected energy
    cse._structure = m3gnet_struct
    df_m3gnet.loc[mat_id, "cse"] = cse


# %%
df_m3gnet["e_form_per_atom_m3gnet_uncorrected"] = [
    get_e_form_per_atom(cse) for cse in tqdm(df_m3gnet.cse)
]


# %% apply energy corrections
out = MaterialsProject2020Compatibility().process_entries(
    df_m3gnet.cse, verbose=True, clean=True
)
assert len(out) == len(df_m3gnet)


# %% compute corrected formation energies
df_m3gnet["e_form_per_atom_m3gnet"] = [
    get_e_form_per_atom(cse) for cse in tqdm(df_m3gnet.cse)
]


# %%
ax = density_scatter(
    df=df_m3gnet, x="e_form_per_atom_m3gnet", y="e_form_per_atom_m3gnet_uncorrected"
)


# %% load 2019 MEGNet formation energy model
megnet_mp_e_form = load_model("Eform_MP_2019")
megnet_e_form_preds: dict[str, float] = {}


# %% predict formation energies on M3GNet relaxed structure with MEGNet
for material_id, struct in tqdm(
    df_m3gnet.m3gnet_structure.items(), total=len(df_m3gnet)
):
    if material_id in megnet_e_form_preds:
        continue
    try:
        if isinstance(struct, dict):
            struct = struct = Structure.from_dict(struct)
            df_m3gnet.loc[material_id, struct_col] = struct

        [e_form_per_atom] = megnet_mp_e_form.predict_structure(struct)
        megnet_e_form_preds[material_id] = e_form_per_atom
    except Exception as exc:
        print(f"Failed to predict {material_id=}: {exc}")

df_m3gnet["e_form_per_atom_m3gnet_megnet"] = pd.Series(megnet_e_form_preds)

assert (
    n_isna := df_m3gnet.e_form_per_atom_m3gnet_megnet.isna().sum()
) < 10, f"{n_isna=}, expected 7 or similar"


# %%
ax = density_scatter(
    df=df_m3gnet, x="e_form_per_atom_m3gnet", y="e_form_per_atom_m3gnet_megnet"
)


# %%
out_path = f"{module_dir}/{today}-m3gnet-wbm-{task_type}.json.gz"
df_m3gnet = df_m3gnet.round(4)
df_m3gnet.reset_index().to_json(out_path, default_handler=as_dict_handler)

df_m3gnet.select_dtypes("number").to_csv(out_path.replace(".json.gz", ".csv"))

# in_path = f"{module_dir}/2022-10-31-m3gnet-wbm-IS2RE.json.gz"
# df_m3gnet_csv = pd.read_csv(in_path.replace(".json.gz", ".csv"))
# df_m3gnet = pd.read_json(in_path).set_index("material_id")
