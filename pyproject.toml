[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "matbench-discovery"
version = "0.1.4"
description = "A benchmark for machine learning energy models on inorganic crystal stability prediction from unrelaxed structures"
authors = [{ name = "Janosh Riebesell", email = "janosh@lbl.gov" }]
readme = "readme.md"
license = { file = "license" }
keywords = [
  "Bayesian optimization",
  "convex hull",
  "high-throughput search",
  "inorganic crystal stability",
  "interatomic potential",
  "machine learning",
  "materials discovery",
]
classifiers = [
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.9",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Physics",
]

requires-python = ">=3.9"
dependencies = [
  "matplotlib",
  "numpy",
  # output_formatting needed to for pandas Stylers
  # see https://github.com/pandas-dev/pandas/blob/-/pyproject.toml
  "pandas[output_formatting]>=2.0.0",
  "plotly",
  "pymatgen",
  "pymatviz[export-figs]",
  "scikit-learn",
  "scipy",
  "tqdm",
  "wandb",
]

[project.urls]
Homepage = "https://janosh.github.io/matbench-discovery"
Repo = "https://github.com/janosh/matbench-discovery"
Package = "https://pypi.org/project/matbench-discovery"

[project.optional-dependencies]
test = ["pytest", "pytest-cov"]
# how to specify git deps: https://stackoverflow.com/a/73572379
running-models = [
  "alignn",
  "chgnet",
  "jarvis-tools",
  # torch needs to install before aviary
  "torch",

  "aviary@git+https://github.com/CompRhys/aviary",
  "m3gnet",
  "maml",
  "megnet",
]
3d-structures = ["crystaltoolkit"]
fetch-data = ["gdown"]
df-pdf-export = ["pdfCropMargins", "pdfkit"]

[tool.setuptools.packages.find]
include = ["matbench_discovery*"]
exclude = ["tests", "tests.*"]

[tool.setuptools.package-data]
matbench_discovery = ["../data/figshare/*"]

[tool.distutils.bdist_wheel]
universal = true

[tool.ruff]
target-version = "py39"
select = [
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "D",    # pydocstyle
  "E",    # pycodestyle error
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FLY",  # flynt
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "N",    # pep8-naming
  "PD",   # pandas-vet
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PYI",  # flakes8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "SIM",  # flake8-simplify
  "SLOT", # flake8-slots
  "TID",  # tidy imports
  "UP",   # pyupgrade
  "W",    # pycodestyle warning
  "YTT",  # flake8-2020
]
ignore = [
  "C408",    # unnecessary-collection-call
  "D100",    # undocumented-public-module
  "D205",    # blank-line-after-summary
  "E731",    # lambda-assignment
  "N806",    # non-lowercase-variable-in-function
  "PD901",   # pandas-df-variable-name
  "PERF203", # try-except-in-loop
  "PLC0414", # useless-import-alias
  "PLR",     # pylint refactor
  "PLW2901", # redefined-loop-name
  "PT006",   # pytest-parametrize-names-wrong-type
  "PT011",   # pytest-raises-too-broad
  "PT013",   # pytest-incorrect-pytest-import
]
pydocstyle.convention = "google"
isort.known-third-party = ["wandb"]

[tool.ruff.per-file-ignores]
"tests/*" = ["D"]

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
allow_redefinition = true
no_namespace_packages = true
no_implicit_optional = false

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:warnings -m 'not slow and not very_slow'"
markers = [
  "slow: deselect slow tests with -m 'not slow'",
  "very_slow: select with -m 'very_slow'",
]
